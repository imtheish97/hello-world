pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "us-central1-docker.pkg.dev/lloyds-interview/lloyds-interview/ishtest"
        K8S_NAMESPACE = "dev"
        // K8S_DEPLOYMENT = "your-deployment"
        CLOUDSDK_CORE_PROJECT = 'lloyds-interview'
        CLIENT_EMAIL = 'jenkins-service-account@lloyds-interview.iam.gserviceaccount.com'
        GCLOUD_PATH = '/Users/ismaelonilearan/Downloads/google-cloud-sdk/bin'
        TERRAFORM_PATH = '/opt/homebrew/bin'
        KUBECTL_PATH = "/opt/homebrew/share/google-cloud-sdk/bin/kubectl"
        PATH = "${env.PATH}:${GCLOUD_PATH}:${TERRAFORM_PATH}:${KUBECTL_PATH}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('GCloud Auth') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'gcloud-creds', variable: 'GCLOUDCREDS')]) {
                        sh '''
                            gcloud version
                            gcloud auth activate-service-account --key-file="$GCLOUDCREDS"
                            gcloud config set project ${CLOUDSDK_CORE_PROJECT}
                            gcloud auth configure-docker us-central1-docker.pkg.dev
                        '''
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh '''
                    docker build -t ${DOCKER_IMAGE}:\${BUILD_ID} .
                    docker tag ${DOCKER_IMAGE}:\${BUILD_ID} ${DOCKER_IMAGE}:latest
                    docker push ${DOCKER_IMAGE}:\${BUILD_ID}
                    docker push ${DOCKER_IMAGE}:latest
                    '''
                }
            }
        }

        stage('Create Namespace') {
            steps {
                script {
                    sh '''
                        gcloud container clusters get-credentials lloyds-interview-gke --region us-central1
                        kubectl get namespace ${K8S_NAMESPACE} || kubectl create namespace ${K8S_NAMESPACE}
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh '''
                    kubectl apply -k ./k8s/overlays/${K8S_NAMESPACE}
                    '''
                }
            }
        }
    }
}
